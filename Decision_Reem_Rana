import numpy as np
import random



def decision_step(Rover):
    # get roll and pitch angles
    if Rover.nav_angles is not None:
        # Check for Rover.mode status
        if Rover.mode == 'forward' and not Rover.picking_up:
            Rover.brake = 0
            # Check the extent of navigable terrain
            if len(Rover.nav_angles) >= Rover.stop_forward:  
                # If mode is forward, navigable terrain looks good
                # set driving direction
                if Rover.vel > 0:
                    Rover.steer = np.clip(np.mean(Rover.nav_angles * 180/np.pi)-random.randint(-5,5)-5, -15, 15)
                else:
                    Rover.steer = - np.clip(np.mean(Rover.nav_angles * 180/np.pi)-random.randint(-5,5)-5, -15, 15)
                # and velocity is below max, then throttle
                if Rover.vel < Rover.max_vel:
                    # count how long we have been in 'slow motion' mode
                    if Rover.vel < 0.2:
                        Rover.stuck_count += 1
                    else:
                        Rover.stuck_count = 0
                        Rover.back = 0
                        
                    if Rover.vel < -1:
                        Rover.stuck_count = 0
                        Rover.back = 0
                        
                    if Rover.stuck_count < 50 or Rover.back > 50: # if we haven't been 'slow' for long or have been drive back for a while
                        # Set throttle value to throttle setting and not stucked
                        Rover.throttle = Rover.throttle_set
                        
                    else:
                        Rover.throttle = - Rover.throttle_set # try drive back
                        Rover.steer = random.randint(-10,10) #try different steer
                        Rover.back += 1
                        
                elif Rover.vel >= Rover.max_vel: # Else coast
                    Rover.throttle = 0
                    Rover.brake = 0
                    # everything goes well
                    Rover.stuck_count = 0
                    Rover.back += 1
                
                    
                
                
                    
            if Rover.samples_insight==1: #rock found
                Rover.throttle = 0
                Rover.brake = Rover.brake_set
                Rover.steer = 0
                Rover.mode = 'rock' #enter rock searching mode
                
            elif len(Rover.nav_angles) < Rover.stop_forward:
                # Set mode to "stop" and hit the brakes!
                Rover.throttle = 0
                # Set brake to stored brake value
                Rover.brake = Rover.brake_set
                Rover.steer = 0
                Rover.mode = 'stop'
                
        elif Rover.mode == 'rock':
            # find the rock direction
            # far detecting
                    
            Rover.brake = 0
            if Rover.samples_insight == 1:
                if Rover.vel > 0:
                    Rover.steer=np.mean(Rover.rock_angle * 180/np.pi)
                else: 
                    Rover.steer= - np.mean(Rover.rock_angle * 180/np.pi)
                Rover.rockcount = 0
                if Rover.vel < Rover.max_vel/2:
                    Rover.throttle = Rover.throttle_set/2
                    Rover.brake = 0
                else:
                    Rover.throttle = 0
                    Rover.brake = 0
                
            else:                
                Rover.rockcount += 1
                if Rover.rockcount >=10:
                    Rover.brake = Rover.brake_set
                else:
                    Rover.brake = 0
                    Rover.steer = 15 * np.sign(np.mean(Rover.rock_angle)) #lost track of rock? keep searching!
                    Rover.rockcount = 0
                    
            
            if Rover.near_sample: #close enough?
                Rover.brake=1
                Rover.throttle = 0
                Rover.rockcount = 0
                
                
            # anti_block operation       
            if Rover.vel < Rover.max_vel:
                    # count how long we have been in 'slow motion' mode
                    if Rover.vel < 0.5:
                        Rover.stuck_count += 1
                    else:
                        Rover.stuck_count = 0
                        Rover.back = 0
                        
                    if Rover.vel < -0.5:
                        Rover.stuck_count = 0
                        Rover.back = 0
                        
                    if Rover.stuck_count < 50 or Rover.back > 50: # if we haven't been 'slow' for long or have been drive back for a while
                        # Set throttle value to throttle setting and not stucked
                        Rover.throttle = Rover.throttle_set/2
                        
                        
                    else:
                        Rover.throttle = - Rover.throttle_set # try drive back
                        Rover.steer = random.randint(-10,10) #try different steer
                        Rover.back += 1
                        Rover.mode = 'forward'
                        
                    

      # If we're already in "stop" mode then make different decisions
        elif Rover.mode == 'stop':
            # If we're in stop mode but still moving keep braking
            if Rover.vel > 0.2:
                Rover.throttle = 0
                Rover.brake = Rover.brake_set
                Rover.steer = 0
            # If we're not moving (vel < 0.2) then do something else
            elif Rover.vel <= 0.2:
                # Now we're stopped and we have vision data to see if there's a path forward
                if len(Rover.nav_angles) < Rover.go_forward or np.mean(Rover.nav_dist) < 100:
                    Rover.throttle = 0
                    # Release the brake to allow turning
                    Rover.brake = 0
                    # Turn range is +/- 15 degrees, when stopped the next line will induce 4-wheel turning
                    Rover.steer = 15
                    Rover.mode = 'forward'    
                # If we're stopped but see sufficient navigable terrain in front then go!
                if len(Rover.nav_angles) >= Rover.go_forward:
                    # Set throttle back to stored value
                    Rover.throttle = Rover.throttle_set
                    # Release the brake
                    Rover.brake = 0
                    # Set steer to mean angle
                    Rover.steer = np.clip(np.mean(Rover.nav_angles * 180/np.pi), -15, 15)
                    Rover.mode = 'forward'
    # Just to make the rover do something 
    # even if no modifications have been made to the code
    else:
        Rover.throttle = Rover.throttle_set
        Rover.steer = 0
        Rover.brake = 0
   
    
    # If in a state where want to pickup a rock send pickup command
    if Rover.near_sample and Rover.vel == 0 and not Rover.picking_up:
        Rover.send_pickup = True
        Rover.brake = 0
        Rover.mode = 'forward'
    
def completed_mission(Rover, min_samples=6, min_mapped=95, max_time=680):
"""Check if rover has completed mission criteria."""
return (Rover.samples_collected >= min_samples
      and Rover.perc_mapped >= min_mapped
      ) or Rover.total_time >= max_time

class ReturnHome():
    """Create a class to represent ReturnHome state."""

    def __init__(self):
        """Initialize a ReturnHome instance."""
        # Home coordinates in world frame
        self.home_pixpts_wf = np.array([99.7]), np.array([85.6])

        self.MAX_VEL = 2.0
        self.SLOW_VEL = 1.0
        self.PARK_VEL = 0.5
        self.MAX_THROTTLE_SET = 0.8
        self.SLOW_THROTTLE_SET = 0.2
        self.PARK_THROTTLE_SET = 0.3
        self.YAW_LEFT_SET = 15
        self.YAW_RIGHT_SET = -15
        self.BRAKE_SET = 10
        self.NAME = 'Return Home'

    def execute(self, Rover):
        """Execute the ReturnHome state action."""
        # Transform home coordinates to rover frame
        home_pixpts_rf = world_to_rover(self.home_pixpts_wf,
                                        Rover.pos, Rover.yaw)
        home_distances, home_headings = to_polar_coords(home_pixpts_rf)
        # Update Rover home polar coordinates
        Rover.home_distance = np.mean(home_distances)
        Rover.home_heading = np.mean(home_headings)

        # Drive at a weighted average of home and nav headings with a 3:7 ratio
        nav_heading = np.mean(Rover.nav_angles)
        homenav_heading = 0.3*Rover.home_heading + (1 - 0.3)*nav_heading

        # Keep within max velocity
        if Rover.vel < self.MAX_VEL:
            Rover.throttle = self.MAX_THROTTLE_SET
        else:
            Rover.throttle = 0

        # Approach at pure nav heading
        if Rover.home_distance > 450:
            Rover.brake = 0
            Rover.steer = np.clip(nav_heading,
                                  self.YAW_RIGHT_SET, self.YAW_LEFT_SET)
        # Approach at the weighted average home and nav headings
        elif 200 < Rover.home_distance <= 450:
            Rover.brake = 0
            Rover.steer = np.clip(homenav_heading,
                                  self.YAW_RIGHT_SET, self.YAW_LEFT_SET)
        # Slow down while keeping current heading
        elif 100 < Rover.home_distance <= 200:
            if Rover.vel < self.SLOW_VEL:
                Rover.throttle = self.SLOW_THROTTLE_SET
            else:
                Rover.throttle = 0
            Rover.brake = 0
            Rover.steer = np.clip(homenav_heading,
                                  self.YAW_RIGHT_SET, self.YAW_LEFT_SET)
        # Precisely approach at pure home heading and slow down for parking
        elif Rover.home_distance <= 100:
            if Rover.vel > self.PARK_VEL:
                Rover.throttle = 0
                Rover.brake = self.BRAKE_SET
                Rover.steer = 0
            elif Rover.vel <= self.PARK_VEL:
                Rover.brake = 0
                # yaw left if home to the left more than 23 deg
                if Rover.home_heading >= 23:
                    Rover.throttle = 0
                    Rover.steer = self.YAW_LEFT_SET
                # yaw right if home to the right more than 23 deg
                elif Rover.home_heading <= -23:
                    Rover.throttle = 0
                    Rover.steer = self.YAW_RIGHT_SET
                # otherwise tread slowly at pure home heading
                elif -23 < Rover.home_heading < 23:
                    Rover.throttle = self.PARK_THROTTLE_SET
                    Rover.steer = np.clip(Rover.home_heading,
                                          self.YAW_RIGHT_SET,
                                          self.YAW_LEFT_SET)


    return Rover             
